{"version":3,"sources":["../../lib/YTApiProviderService.ts"],"names":[],"mappings":"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","file":"YTApiProviderService.js","sourceRoot":"","sourcesContent":["import {YTApiConfig, initConfigs} from \"./config/YTApiConfig\";\nimport {DoCheck} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport 'rxjs/add/observable/of';\n\ndeclare const gapi: any;\nlet GoogleAuth: any;\n\nexport class YTApiProvideService{\n\n  private config: YTApiConfig;\n\n  constructor(config: initConfigs) {\n    this.config = new YTApiConfig(config);\n  }\n\n\n  handleClientLoad() {\n    gapi.load('client:auth2', this.initClient());\n  }\n\n  initClient() {\n    // Initialize the gapi.client object, which app uses to make API requests.\n    // Get API key and client ID from API Console.\n    // 'scope' field specifies space-delimited list of access scopes\n    let configs = this.config.getConfigs();\n    setTimeout(function () {\n      gapi.client.init(configs).then(() => {\n        GoogleAuth = gapi.auth2.getAuthInstance();\n\n        // Listen for sign-in state changes.\n        // GoogleAuth.isSignedIn.listen(updateSigninStatus);\n\n        // Handle initial sign-in state. (Determine if user is already signed in.)\n        // this.setSigninStatus();\n      });\n    }, 2000)\n\n  }\n\n//\n  handleAuthClick(event) {\n    return GoogleAuth.signIn();\n  }\n\n//\n  setSigninStatus() {\n    // let user = GoogleAuth.currentUser.get();\n    // let isAuthorized = user.hasGrantedScopes('https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner');\n    // Toggle button text and displayed statement based on current auth status.\n    // if (isAuthorized) {\n    //     defineRequest();\n    // }\n  }\n\n  updateSigninStatus(isSignedIn) {\n    this.setSigninStatus();\n  }\n\n  private createResource(properties) {\n    let resource = {};\n    let normalizedProps = properties;\n    for (let p in properties) {\n      let value = properties[p];\n      if (p && p.substr(-2, 2) == '[]') {\n        let adjustedName = p.replace('[]', '');\n        if (value) {\n          normalizedProps[adjustedName] = value.split(',');\n        }\n        delete normalizedProps[p];\n      }\n    }\n    for (let p in normalizedProps) {\n      // Leave properties that don't have values out of inserted resource.\n      if (normalizedProps.hasOwnProperty(p) && normalizedProps[p]) {\n        let propArray = p.split('.');\n        let ref = resource;\n        for (let pa = 0; pa < propArray.length; pa++) {\n          let key = propArray[pa];\n          if (pa == propArray.length - 1) {\n            ref[key] = normalizedProps[p];\n          } else {\n            ref = ref[key] = ref[key] || {};\n          }\n        }\n      }\n      ;\n    }\n    return resource;\n  }\n\n  private removeEmptyParams(params) {\n    for (let p in params) {\n      if (!params[p] || params[p] == 'undefined') {\n        delete params[p];\n      }\n    }\n    return params;\n  }\n\n  buildApiRequest(requestMethod, path, params, properties = false): any {\n    params = this.removeEmptyParams(params);\n    let request;\n    if (properties) {\n      let resource = this.createResource(properties);\n      request = gapi.client.request({\n        'body': resource,\n        'method': requestMethod,\n        'path': path,\n        'params': params\n      });\n    } else {\n      request = gapi.client.request({\n        'method': requestMethod,\n        'path': path,\n        'params': params\n      });\n    }\n    return request;\n  }\n\n}\n"]}